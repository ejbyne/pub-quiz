type Query {
  quizSummary(quizId: ID!): QuizSummary!
}

type Mutation {
  generateRandomQuiz(input: GenerateRandomQuizInput!): QuizGenerated!
  saveQuiz(input: SaveQuizInput!): Boolean!
  joinQuiz(input: JoinQuizInput!): PlayerJoined!
  nextQuizState(input: NextQuizStateInput!): QuizState!
  submitAnswers(input: SubmitAnswersInput!): Boolean!
}

type Subscription {
  playerJoined(quizId: ID!): PlayerJoined
    @aws_subscribe(mutations: ["joinQuiz"])
  nextQuizState(quizId: ID!): QuizState
    @aws_subscribe(mutations: ["nextQuizState"])
}

input GenerateRandomQuizInput {
  quizName: String!
}

input SaveQuizInput {
  quizName: String!
  rounds: [RoundInput!]!
}

input RoundInput {
  roundName: String!
  questions: [QuestionInput!]!
}

input QuestionInput {
  text: String!
  answer: String!
  options: [String!]
}

input JoinQuizInput {
  quizId: ID!
  playerName: String!
  reconnect: Boolean
}

input NextQuizStateInput {
  quizId: ID!
}

input SubmitAnswersInput {
  quizId: ID!
  playerName: String!
  roundNumber: Int!
  answers: [PlayerAnswerInput]!
}

input PlayerAnswerInput {
  answer: String
}

type QuizGenerated {
  quizId: ID!
  quizName: String!
}

type QuizSummary {
  quizId: ID!
  quizName: String!
  playerNames: [String!]
  state: QuizState!
}

type RoundSummary {
  roundNumber: Int!
  roundName: String!
  numberOfQuestions: Int!
}

type Question {
  number: Int!
  text: String!
  options: [String!]
}

type QuestionWithAnswer {
  number: Int!
  text: String!
  options: [String!]
  answer: String!
}

enum QuizStatus {
  QUIZ_NOT_YET_STARTED
  ROUND_STARTED
  QUESTION_ASKED
  QUESTION_ANSWERED
  ROUND_FINISHED
  QUIZ_FINISHED
}

interface QuizState {
  quizId: ID!
  status: QuizStatus!
}

type QuizNotYetStarted implements QuizState {
  quizId: ID!
  status: QuizStatus!
}

type RoundStarted implements QuizState {
  quizId: ID!
  status: QuizStatus!
  roundSummary: RoundSummary!
}

type QuestionAsked implements QuizState {
  quizId: ID!
  status: QuizStatus!
  roundSummary: RoundSummary!
  question: Question!
}

type QuestionAnswered implements QuizState {
  quizId: ID!
  status: QuizStatus!
  roundSummary: RoundSummary!
  question: QuestionWithAnswer!
}

type RoundFinished implements QuizState {
  quizId: ID!
  status: QuizStatus!
  roundSummary: RoundSummary!
}

type QuizFinished implements QuizState {
  quizId: ID!
  status: QuizStatus!
}

type PlayerJoined {
  quizId: ID!
  playerName: String!
}
