type Query {
    quizSummary(quizId: ID!): QuizSummary!
}

type Mutation {
    saveQuiz(input: QuizInput!): Boolean!
    joinQuiz(input: JoinQuizInput!): PlayerJoined!
    stepForward(input: StepForwardInput!): NextStep!
    # finishRound(quizId: ID!): Boolean!
    # nextAnswer(quizId: ID!): Boolean!
}

type Subscription {
    playerJoined(quizId: ID!): PlayerJoined
    @aws_subscribe(mutations: ["joinQuiz"])
    nextStep(quizId: ID!): NextStep
    @aws_subscribe(mutations: ["stepForward"])
}

input QuizInput {
    quizName: String!
    rounds: [RoundInput!]!
}

input RoundInput {
    roundName: String!
    questions: [QuestionInput!]!
}

input QuestionInput {
    question: String!
    answer: String!
}

input JoinQuizInput {
    quizId: ID!
    playerName: String!
}

input StepForwardInput {
    quizId: ID!
}

type QuizSummary {
    quizId: ID!
    quizName: String!
    playerNames: [String!]!
    status: QuizStatus!
    currentRound: Round
    currentQuestion: Question
}

enum QuizStatus {
    NOT_YET_STARTED
    IN_PROGRESS
    FINISHED
}

type Round {
    roundNumber: Int!
    roundName: String!
    numberOfQuestions: Int!
}

type Question {
    roundNumber: Int!
    questionNumber: Int!
    text: String!
}

type PlayerJoined {
    quizId: ID!
    playerName: String!
}

union NextStep = NextRound | NextQuestion

type NextRound {
    quizId: ID!
    round: Round!
}

type NextQuestion {
    quizId: ID!
    question: Question!
}

#type MarkingAllocation {
#    roundNumber: Int!
#    player: String!
#}

#type Answer {
#    roundNumber: Int!
#    questionNumber: Int!
#    answer: String!
#}
